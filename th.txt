JAVA script client side script lang:
server side prog

node js -->server 

node


npm init --> to create project

code .
app.js
index.js
server.js

NODE PACKAGE MANAGER:
function[] --> js.file[] -->folder[] --> build -->node_modules --> NPM
function method --> class -->package --> project ->jar --> jdk


***********************
npm install express 
npm install nodemon -g

npodemon app.js
***************************


API --> application programming interface
Request Method :

GET : 
POST :
PUT :
DELETE :
PATCH :


-----------------------------------------
consumer : 
Google Map -->code --> google API -->DATA --> display
-----------------------------------------

producer : --

student result --> suggest science commerce --->

API --> consume --> data

npm i exprees[already installed]
npm install mongoose

app.js db connection

create src
    models:
      UserModel.js


client -->app.js -->server -->routes ---> controller [db] --> 
routes --> server --->end client





1)create folder named routes

2)creaetd file in controller is UserController.js


3)creaet UserRoutes.json



APP.JS __ server --> routes -- controller --> function --->[db] ->res
userRoutes 
app.user("/user),userRoutes)
localhost:3000/user


role

rid rname

user
uid ..... rid fk

inner join  



middleware:


app --> routes -->controller --->db --->response...

app --> routes -->[middleware]  ---> controller --->db --->response...


middleware condition :

if condition satisfied -> controller 
else ---> response 


req.parmas /employee/:id
req.body   // json


-----------------------------------
req.headers // header




zod 
yup
hapi
joi
express-validator

1)npm install zod
2)util ---> EmployeeValidationSchema.js
3)middleware --> ZodMiddleware.js

routes --> middleware ---> add --> zodMiddleware.validate



--->otp ==> 1234 --> store ---> AuthModel --> {id,otp,email}

--->updateStatus ---> put ---> req.body --> otp,email -->update -->true


---------------------------------------------------------------------

util --> EmailUtil.js
otpSCeham ---> otp,email,time
addUser --> api --->

after adding user --> otp generation logic

otp save database. ...
----------------------

forgot password -->

email --> database match ---> if yes --> otp --> otp databse.... mail

resetPassword
email --> otp ---> new password // update..




